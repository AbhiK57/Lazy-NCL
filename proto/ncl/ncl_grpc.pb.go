// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/ncl.proto

package ncl

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	NCLPeer_AppendMetadata_FullMethodName = "/ncl.NCLPeer/AppendMetadata"
	NCLPeer_ReadMetadata_FullMethodName   = "/ncl.NCLPeer/ReadMetadata"
)

// NCLPeerClient is the client API for NCLPeer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NCLPeerClient interface {
	// Appends entry to peers log
	AppendMetadata(ctx context.Context, in *AppendMetadataRequest, opts ...grpc.CallOption) (*AppendMetadataResponse, error)
	// reads metadata entries starting at given offset.
	ReadMetadata(ctx context.Context, in *ReadMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metadata], error)
}

type nCLPeerClient struct {
	cc grpc.ClientConnInterface
}

func NewNCLPeerClient(cc grpc.ClientConnInterface) NCLPeerClient {
	return &nCLPeerClient{cc}
}

func (c *nCLPeerClient) AppendMetadata(ctx context.Context, in *AppendMetadataRequest, opts ...grpc.CallOption) (*AppendMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendMetadataResponse)
	err := c.cc.Invoke(ctx, NCLPeer_AppendMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nCLPeerClient) ReadMetadata(ctx context.Context, in *ReadMetadataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Metadata], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &NCLPeer_ServiceDesc.Streams[0], NCLPeer_ReadMetadata_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReadMetadataRequest, Metadata]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NCLPeer_ReadMetadataClient = grpc.ServerStreamingClient[Metadata]

// NCLPeerServer is the server API for NCLPeer service.
// All implementations must embed UnimplementedNCLPeerServer
// for forward compatibility.
type NCLPeerServer interface {
	// Appends entry to peers log
	AppendMetadata(context.Context, *AppendMetadataRequest) (*AppendMetadataResponse, error)
	// reads metadata entries starting at given offset.
	ReadMetadata(*ReadMetadataRequest, grpc.ServerStreamingServer[Metadata]) error
	mustEmbedUnimplementedNCLPeerServer()
}

// UnimplementedNCLPeerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedNCLPeerServer struct{}

func (UnimplementedNCLPeerServer) AppendMetadata(context.Context, *AppendMetadataRequest) (*AppendMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendMetadata not implemented")
}
func (UnimplementedNCLPeerServer) ReadMetadata(*ReadMetadataRequest, grpc.ServerStreamingServer[Metadata]) error {
	return status.Errorf(codes.Unimplemented, "method ReadMetadata not implemented")
}
func (UnimplementedNCLPeerServer) mustEmbedUnimplementedNCLPeerServer() {}
func (UnimplementedNCLPeerServer) testEmbeddedByValue()                 {}

// UnsafeNCLPeerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NCLPeerServer will
// result in compilation errors.
type UnsafeNCLPeerServer interface {
	mustEmbedUnimplementedNCLPeerServer()
}

func RegisterNCLPeerServer(s grpc.ServiceRegistrar, srv NCLPeerServer) {
	// If the following call pancis, it indicates UnimplementedNCLPeerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&NCLPeer_ServiceDesc, srv)
}

func _NCLPeer_AppendMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NCLPeerServer).AppendMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NCLPeer_AppendMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NCLPeerServer).AppendMetadata(ctx, req.(*AppendMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NCLPeer_ReadMetadata_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadMetadataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NCLPeerServer).ReadMetadata(m, &grpc.GenericServerStream[ReadMetadataRequest, Metadata]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type NCLPeer_ReadMetadataServer = grpc.ServerStreamingServer[Metadata]

// NCLPeer_ServiceDesc is the grpc.ServiceDesc for NCLPeer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NCLPeer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ncl.NCLPeer",
	HandlerType: (*NCLPeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendMetadata",
			Handler:    _NCLPeer_AppendMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadMetadata",
			Handler:       _NCLPeer_ReadMetadata_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/ncl.proto",
}
